Day1 (04/30/2023)
	* Explaining basics of Git and Eclipse
	* Created git account
	* Created a maven project
	* pushed local project into online 
	* added collaborator
	* Importing a project from remote to local (Cloning)
	
Day 2 (05/01/2023)
	* Importing a project from remote to local (Cloning)
	* General things about Java
		* everything in Java is Object (but there is a but) 
		* Object has structure and it does a specific work
	 
Real time 

Taluk Office

* Marriage certificate, Income certificate, death certificate, Caste certificate

Receptionist
Clerk
Broker

building - Taluk office 

Reception: 
chairs
table
reception table 
people 
water
newspaper
pen
Reception phone
Rceptionist
Receptionst personal phone
documents
camera
system


Marriage certificate room: 
people
chairs
table
camera 
system 
newspapre
document
pen
water
Personal phone
common phone
marriage certificates

Income certificate room: 
people
chairs
table
camera 
system 
newspapre
document
pen
water
Personal phone
common phone
income certificates

Access Modifer
Personal things 
common things


each room is to do a specfic designated work. 
	each room is called Method.
	Method in java is to do a specific work
	Whatever work you do, it should be a method or inside a method
	Whatever happens inside a method is invisible to others
	You can take reception room water bottle to any methods room but you can not take methods room things to other places (there is a but)

Structure 
People - 50
chair - 100
table - 10

people, chair, table - data type 

People - 100 - chair 100 - data type and variable 
One person in that people name is Sathya - name 

Taluk office building 
	It is to do a set of work - marriage, income & other certificates
	Marriage certificate method, Income certificate method, etc. (each of them are methods)
	Class in java consist of many methods
	Taluk office - Class


People adminstration - package
Chennai Taluk office - Class 
	below are sub classes of Chennai Taluk office 
Velachery Taluk office - Class 
	Velachery east Taluk office - Class (He is sub class of Velachery class)
Tambaram Taluk office - Class
Guindy Taluk office - Class 

* Sub classes of Chennai are Velachery, Guindy and Tambaram
* Velachery east is sub class of Velachery 
* Velachery east is same package of Tambaram but not a sub class of Tambaram

Based on this only we created access modifier 


Police department adminstration - package
Chennai police station 
Tambaram police station 

Hospital administration - package 
chennai hospital (Govt and private) 
tambaram hospital 

Law management - package
Chennai court 
Tambaram court 

Chennai administration - project
	People adminstration - package
	Police department adminstration - package
	Hospital administration - package 
	Law management - package
	

* People adminstration have a set of rules
* Police department have set of rules
* Hopspital adminstration 
	private hospital rules set
	Govt hospital rules set 

These rules set in Java are called interface

Taluk office 
	Receptionist - Chennai Taluk office receptionist
	Reception Phone - Chennai taluk office phone 
	Reception table - Chennai taluk office reception table 
similarly for other classes too. 

They are always belongs to their specific class  - static 
	* Whenever we call a static member outside of class, we call them with their class name 
	* within a class, we call static member directly (no need to call as Chennai Taluk office Receptionist)

Velachery Govt hospital - class 
	* They are scheduling a health checkup camp 
		* In this case, they take doctors, nurses, medicines, operation room, cleaning room and other things from Velachery Govt hospital only

Health checkup camp - Object name 
Object we create for class only
When creating object, they take/create copy of all the things in that class

Tambaram police station wants health check up 
* In Tambaram police station's campus, we create object for Tambaram Govt hospital health check up camp 

Coming back to Taluk office 
clerk in taluk office, we take as constructor

* We just tell what you want 
* you tell what you want with document
* you tell what you want with document1, document2
* you tell what you want with documents, amount
* you tell what you want with amount

Project
	package1
		InterfaceA
		ClassA (Datatype/variables/methods)
			ClassAA 
			ClassAB
		ClassB
		ClassC
	package2
		ClassA
		ClassB
	package3
		ClassX
		ClassA
		

* Class - It does a set of work. It consist of variables and methods. Each work would be done by methods. 

* Methods - It does specific job. It always written inside a class

* Variable - it can have type(Data type) and posses a number or name;
			variables can have different access - access Modifier
			
* Access Modifier - difines where we can use a variable/method/class

* Interface - It contains rules most of the time. Sometimes it does some work too(means method).
			Interface is always followed by class/classes. 
			When class follows interface, class should do the rule written in the interface

* package - contains class/classes/interface/interfaces/file/files/folder/folders

* Project - consist of package/packages/file/files/folder/folders/source(src)folder

* static - static means belongs to the class. If govt hospital is class, then hospital receptionist is a static member of that class. 
We can not seperate them variables and methods can be static
			within a class - static can be used anywhere directly (in a static method or in non-static method)
			Outside calss - static can be used but alone with class name. (in a static method or in non-static method)

* Object (instatiation or initiation)  - E.g: Medical camp; 
			We create Object only for classes; Whenever we create object we copy whatever the class contains(except static)
			means, only non-static is copied
			Through object we can not call static things.

* Constructor - Object creation happens with the help of constructor
				constructor is available in different kind
				1. without any money/permission
				2. only with money
				3. only with permission
				4. with both money and permission
				
**************************************************************************
DAY 3(02/05/2023)

Class - important thing, through which we perform some task. Class may contains methods and variables

Method1 - A work
Method2 - B work
Method3 - C work ( A work + some other work)

redundant - repeatable 
reuse

Variables - shape and count/name
shape - datatype 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Datatype: Its a classification of a data, which tells the compiler or interpretor about how the programmer intends to use the data.

1) Primitive
	a) boolean - yes or no OR true or false 
	b) Textual 
		char - a, b, c, A, B
		byte - 
			byte x = 10;
	c) numeric 
		int 
		short
		double
		long
		float

2) Non Primitive
	d) String 
	e) array

each datatype has a default value

* default value of String is null
* default value of int is 0
* boolean - false

How we declare datatypes
Syntax = accessModifier dataType variableName = variableValue

int a = 10;  
int a;
String a = "10";
String a;
String a = null; (null is a keyword here, it means String a has nothing.)
String a = "null"; ("null" is a String/word here.)
double a = 10d;
char sathya = 'A';
boolean Boolean = true;

int a; - declare
a = 10; - define/initiate

int a = 10;
int - data type( primitive --> numeric)
a - variable/variableName;
10 - value posses by the variable/ value pointed by the variable


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Variables - Its a memory location that can hold values of a specific datatype.

Types of variables 
1. Local variable - 
	* declared within a method/constructor, for, if    -- block ({...})
	* scope of local variable is only within the block in which the variable is declared
	* intialisation of local variable is madatory
	* local variables can not be static
	{
	int a = 10;
	char c;
	String sathya = "10";
	}
	
2. Instance variable/class variable/non-static variable
	* Declared within a class but outside of a block ({...})
	* Non- static variables
	* To access instance variables, we need to create object
	
	int a = 10;
	String sathya = "10";
	
	
3. static variable
	* Declared within a class but outside of a block
	* static keyword is used with variables and methods
	* To access this variable, dont need to create an object
	* within a class - static can be used anywhere directly (in a static method or in non-static method)
	* Outside class - static can be used but along with class name. (in a static method or in non-static method)
	
	static int a = 10;
	static String sathya = "10";
	
	ClassA (TalukOffice) {

static int a = 10;
//a = receptionist;

method1() {

print (a);


}

}


ClassB (Govt hospital) {

method2() {
print (ClassA.a);
//print (TalukOffice.receptionist)
}
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
Access Modifier
	* It defines where and who can use a method/variable/class
	1) default
	2) private
	3) protected
	4) public 
	
	Syntax = accessModifier dataType variableName/variable = variableValue
	int a = 10; - default (no need to mention "default" word
	private int a = 10;
	protected int a = 10;
	public int a = 10;
	
	
	packageA
		classA ( public int a = 10)
			ClassAA (same package and sub class of A)
		classB (same package but non sub class of A)
	packageX
		classX (diff package non sub class)
		classXA (diff package but sub class of A)
		
	

                                     | default |  private  | protected  | public 
									 |         |           |            | 
classA ( int a = 10)                 | yes     | yes       | yes        | yes
									 |         |           |            |
same package but sub class           | yes     | no        | yes        | yes 
									 |         |           |            |
same package but non sub class       | yes     | no        | yes        | yes
									 |         |           |            |
different package but sub class      | no      | no        | yes        | yes
									 |         |           |            |
different package but non sub class  | no      | no        | no         | yes

ClassA {

int a = 10;
private int b = 100;
protected int c = 20;
public int d = 15

method1() {
print (a); - No compile time error
print (b);
print (c);
print (d); 
}

}

ClassAA {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

ClassB {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

################################
JVM, JRE, JDK

our codes - english - .java
compile - .class - byte code (machine recognizable language)


JVM - Java Virtual Machine 
* This can not be seen
* it starts the execution(creates Runtime Environment)
* It first checks for main method
* It creates the code flow, in java the flow is called "Thread" 
* JVM provides run time environment in which Java byte codes can be executed
* loads code| verifies code| execute code| provides run time environment

JRE - Java Runtime Environment
* Physically exist
* Contains JVM and set of libraries
* JVM uses these libraries to execute the codes

JDK - Java Developement kit
* It contains JVM, set of libraries and dev tools (JRE + dev tools)
* Used to develop and execute the codes
* Dev tools + debugger + compiler + java doc

**************************************************************************
DAY 4(05/05/2023)		
	
What is eclipse (IDE)

Its an editor to edit and view your project or project files
While writing itself, it will notify us about complilation errors

Its a user interface to view your project or file in an easy way

tab
drag and drop

* Perspective 
	Few of the perspectives in Eclipse
	* Java
	* Debug
	* Git
	
* window
* Market place 
* file search 
* show view

For shortcuts - Ctrl+Shift+L

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Maven

GroupID
Artifact ID 
verision

Facebook jar
Meta 
facebook
version 1.1.100

Insta jar
Meta
Insta
version 10.1.10

* Dependency Management tool
* we dont need to download any jar files(dependency).
* Group ID, Artifact ID and Version
* If we create a project with mavan as a dependency management tool, we get a proper project structure.
* Important file in maven project is pom.xml. In this file, we add dependency details 
* Dependencies will be stored in .m2 folder

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Git (one of the SCM - source code management tools)

We can store our project code in a proper structure. 
It will help us to reduce time and many people can work on a project at a same time 

1. Create a project in local (our system)
2. Create git account
3. Create a repo in your git account (remote)
4. We view our local project in system through Eclipse
5. We need to connect our Eclipse with Git repo

upload project in Git

Steps to upload project in Git hub

1) Create a remote repository
2) In your system open git bash from your project location
3) enter below commands
	git init
	git add .
	git commit -m "any message you can type here"
	git remote add origin SSHURL
	git push origin master
	
	
	To view status:  git status 
	to clear lines: clear
	
				
*******************************************************************

DAY 5(10/05/2023)
				
Explaining 
	* Tell me about yourself
	* Tell me about your project
	* Tell me about your day to day life
	
*******************************************************************

DAY 6(11/05/2023)

JAVA

* Java is case sensitive language
* Object Oriented Program(OOPs)
* But its not 100% OOPs language. Why? (we will see it later) 

JAVA Standard

Java keywords
new, class, access modifiers, static, this, super, throw, throws, try, catch, final, finally,
data types, if, for, while, break, continue, switch

Naming conversion in java
* Should not use above things
* homepage - homePage (Camel case)

If you are creating package, package name
* should start with small letter followed by camel case

if you are creating class
* should start with Captial letter followed by camel case

thisIsPackageName 
ThisIsClassName
ThisIsInterfaceName

thisIsMethodName
thisIsObjectName or ThisIsObjectName
thisIsVariableName



Syntax

class 

accessModifer class(Java keyword) className {

}

e.g: public class GovtHospital {

}


method 

accessModifer static/Non-static returnType methodName() {

}

static/Non-static accessModifer returnType methodName() {

}

public void thisIsNonStaticMethod() {

}

public static void thisIsStaticMethod() {

}

static public void thisIsStaticMethod() {

}

Methods in Java

1) static method
2) non static method

With in a class
* calling static method from a static method - directly call
* calling static method from a non static method - directly call 

* calling non-static from a static method - Object creation
* calling non-static from a non static - Object creation/ directly call

Outside class
	1. calling static method from non static method - using className
	2. calling static method from static method - using className
	3. calling non-static method from non-static method - Creating Object
	4. calling non-static method from static method - Creating Object
	
**********************************************************************
DAY 7(12/05/2023)

Object creation - to call non-static methods

	* Java is a Object Oriented Programming language.
	* But its not 100% OOPs language.
	* Almost everything in Java is based on Object only
	* Super most class of Java is Object class
	* Whatever class we create, it always follows Object class by default. 
	* Object class also, contains methods and variables 
	* Whenever we want to use non static variables/methods, we need to create object for the
		respective class.
	* We call it as Object intantiation or Object creation
	* We create object only for classes
	* Syntax for object creation
		ReferenceClassName ObjectVariableName = new ConstructorOfClassForWhichWewantToCreateObject();
		ClassA obj = new ClassA();
	* For a single class, we can create multiple objects (either within class or outside class)
	* DEFINITION
		* Whenever we create Object for a class, whatever non-static members present in that class
			will be copied and stored in heap memory

*************************************************************************	
DAY 8(13/05/2023)
			
What is heap memory? 

Memory Management

Heap memory
Stack memory
SCP (String Constant Pool - A part of heap memory)

We have seen
	Access modifier 
	Datatype/variables basic
	Methods 
	Object

ClassA obj1 = new ClassA();

ClassA - Class Name
Obj1 - Object Name variable
new = key word to create obj
ClassA() - Constructor or Object creation or instance creation

* Whenever we create an object for a class, whatever non-static variables and methods present in that class will be copied to heap memory
* Object varibale or instance variable, is stored in stack memory 
* We can create multiple object for a single class


	stack memory			Heap me
	obj1.				a = 10; method1();
	obj2				a = 10; method1();
	obj3				a = 10; method1(); 
	obj1ClassB			non static members
	
	
int a = 10;
* a = 10 - it will be stored in stack memory

String Literals
	String Sathya = "1000"; 
	
Object creation for String
	ClassA obj1 = new ClassA();
	String Sathya = new String("1000"); 

Sathya - Stack
1000 - SCP of Heap memory

String str = "Sathya";
String str1 = "Sathya";
String str2 = "Ranjith";

stack 		SCP
str			"Sathya" - 
str1 		
str2 		Ranjith

str1 = str1 + str2;
str1 = SathyaRanjith

str - Sathya - SathyaRanjith


stack 		SCP
str			"Sathya" - 
str1 		SathyaRanjith
str2 		Ranjith

str1 = str1+"abc"

			
String a = "new";
a = a+"10";
a = new10;

Immutable concept 
* It happens with String literals

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Data types as variables 
Variables in Java

Based on where we use our data types or variable names, we categories variables in 3 types 
 
1. Local variable
2. Class level or instance variable 
3. static variable

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Data type as a parameter and return type
Variable as a parameter

Methods in Java
1) method without return type
2) method with return type
3) static method
4) non static method
5) parameterized method
6) Non parameterized method

**************************************************

DAY 9(14/05/2023) - Class1

Return type in detail


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


DAY 9(14/05/2023) - Class2

Methods starts with { and ends with }

Method with body or concrete method 
Ex: public void method1() {

}

Methods can be without body or bodyless method or abstract method
Ex: public void method1();



Interface in Java
	* Creating interface within interface
	* creating class within class
	
*****************************************************

DAY 10(15/05/2023)

* Interface examples -> WebDriver, WebElement, List
* Interface as a return type --> List<WebElement> findElements(By by))
* Class as a parameter  --> findElement(By by) ;

driver.findElement(By.id("text")).click();

WebElement.click();


driver.findElement(By.xpath("")).isSelected();

WebElement(Gender checkbox).isSelected();


driver.switchTo().window(); //TargetLocator.window();
driver.switchTo().alert();
driver.switchTo().frame();



driver.switchTo().alert().accept();


TargetLocator.alert().accept();

Alert.accept();

Alert alert = driver.switchTo().alert();
alert.accept():


TargetLocator var = driver.switchTo();
Alert alert = var.alert();
alert.accept();

TargetLocator var = driver.switchTo();
Alert alert = var.alert();
String str = alert.getText();
syso(str); --> No benefits selected

driver.switchTo().alert().getText();


driver.switchTo().alert().accept();


public int method1() {

}

int variableName = obj.method1();



Abstract class in introduction

**************************************************

DAY 11(16/05/2023)

Abstract class  in detail


*&&&&&&&&&&&&

Whenever you study a new concept, in that concept include previously studied concepts

If you are studying abstract class, then in that concept, you need check how the below things works
Variables
methods (static or non static / parameterized or not / with or without return type)
Object 
Interface

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

OOPs concept

Object Oriented Program means everything in the program is considered as Object

Java is OOP language but not 100% OOPs language. Primitive date type (int, float, etc.), they are not object. 

Root class of Java is Object. Means, if you create any class, Object class is always extended. But it is implicitly used.

public class ClassA {

} 

this is nothing but 

public class ClassA extends Object {

}

OOPs Concepts in Java

1. Encapsulation
2. Abstraction
3. Inheritance
4. Polymorphism

*******************************************************************

DAY 11(17/05/2023)			
		
Inheritance concept in detail

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

What is Method signature

accessModifier static/non-static returnType methodName(with or without Parameter) {

}

methodName(with or without Parameter) - method signature 

##########################

OOPs - Polymorphism

One thing available in different format.

* depends on 
	1) inheritance
	2) object creation
	3) method signature (method name and parameters(with or without))


Two polymorphism - Overloading, overriding 

OverLoading 
* It happens within a class 
* Method name should be same and parameters should vary

Overriding
* It happens between two classes (Parent and child class) - Inheritance concept
* Method name should be same and parameter also should be same


********* main method learning *********

********************************************************************************

DAY 12(19/05/2023)

Constructor

Topics we covered before
	* Variables
	* Methods
	* Static
	* return type
	* Object creation
	* Inheritance
	* Overload
	* Override
	
Once we see the basic of Constructor, we are going to implement all the above topics on Constructor


**********************************************************************

Day 13 (21/05/2023) 

Use of Constructor 

* Short cuts for selecting word, sentence
* Navigating through a sentence


******************************************************************************

Day 14 (23/05/2023)

Keywords in Java

access modifiers
data types
class, interface, package, abstract
return types, return
extends, implements
new
if, for, while, do


final
static
super, super()
this, this()

static
 * always belongs to the class
 * object creation not needed
 * static members within a class - direct calling
 * static members outside a class - className.staticMemberName
 * we can overload static method
 * we can not override static method
 * In interface, we can create a methods with body but that method should be either static or default
 
 
Final
 * we have to initiate while declaring
 * Once value its initalized, we cant change the value at any point
 * we can use final with variables, methods and class
 
 Super and this keywords

super() and this() 

*****************************************************************************

Day 15 (26/05/2023)

Agile



Two kind of methodology
1. Agile
2. Water fall.

Difference between waterfall and agile 

Agile methodology

key words 

Scrum time period or Agile time period  (Iteration)
	- one or two week or 15 days (Mostly its starts on Wednesday and ends with Tuesday)
	
an epic serves to manage tasks. It's a defined body of work that is segmented into specific tasks 
(called �stories,� or �user stories�) based on the needs/requests of customers or end-users


PI meeting - 
	High level team works on who will work on which changes and those changes will be split into small parts so that, 
	we can do that small work in one sprint time
	Duration: 4 hours to half a day 
	Attendee: Product Owner and Scrum master
	
Sprint Planning
	Task(User Stories) for small work is created, explained, assigned to a person, complexity will be decided
	Here complexity is called story point
	Basically story point is fibanocci series 1, 2, 3, 5, 8, 13.
	
	Inform your leave plan
	 
Daily Stand-Up
	What you did yesterday
	what are you going to do today 
	what is your plan for tomorrow
	Any risk on completing work
	
	leave details for unplanned or planned leave
	
Sprint Review/Demo
	Give prove it or demo on whatever stories you did on that sprint

Sprint Retrospective
	What went well and appreciations
	What need improvement
	
	
When there is a risk in completing a story
	E.g: Developer gives story to testing when there is only 3 days left. But in order to complete the testing you need 7 days
In this case
	1. No other choice you need to complete the testing in 3 days itself.
	2. Complete as much as possible, then create a new QA(Testing) story in next sprint
	3. Move the entire story from this sprint to next sprint
	4. Let your scrum master to ask for extension of the current sprint

*********************

Scrum

Teams in Scrum

Company - Wipro
client/Account - Alight
	* One Account can have multiple projects
Domain - Health & Welfare
Project - Bank of America
Project contains many teams and they are called scrum teams (POD)  

Consider client as your project team *****
Each POD is a scrum or agile team

Scrum Team 
	* Scrum Master - POD lead
	* Product Owner - BIM/BOM
	* New hire team config team
	* New hire testing team
	
Scrum team
	Product Owner(PO) - BIM or BOM
	Scrum master - Like lead but does only managerial work
	Devs(Onshore and offshore) - 
	Testers(Onshore and offshore)
	Business Tester if there is any
	
	In my team totally 12 members
	1. PO (client person)
	2. SM (from client or from our company)
	3. 2 dev in onsite (from client or from our company)
	4. 3 dev in offshore (from client or from our company)
	5. 3 Tester in offshore (You and other two) 
	6. 1 Tester in onshore (Testing lead)
	7. Business Tester or BA 
	
Company - Capgemini
Client - Fidelity 
Outsourcing their project to Capgemini
Chennai have fidelity office too. 
Project - Fidelity invesment
Our project have both Client team persons as well as Capgemini team persons

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Errors and Exceptions 

try catch finally

Throw, Throws, Throwable

************************************************************************
				
Day 16 (27/05/2023)			

Blocks in Java

static block

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& 

if condition 

this or that

this 


-------------------------------
if(condition), where condition - should return boolean(true or false)
Conditional operators  
10 == 20 
10 != 20
10 > 20
10 < 20
10 <= 20
10 >= 20

int a = 10;
int b = 20;
if(a>b) {

}

public int method1() {

return 10;
}

if(10 != method1()) {

}
-----------------------------------------------


condition only

==
>
<
!=


if

if 
if 
if

if
else


if
else if 
else if
else 


---------------------------

multiple condition


&&
|| 


if(condition1 || condition2)
if(condition1 && condition2)
if(condition1 && (condition2 || condition3)) 







if(soap available == yes)
	doing some other work
	if(soap name == yes)
	doing some other work
		if(soap amount is 10 == yes)
			buy soap

if(soap available == yes && soap name == yes && soap amount is 10 == yes) 
	buy soap



if(condition) {
line1
line2
line3
}

if(condition) 
line1
line2
line3


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

for 

for(initiation; condition; increment or decrement) {

}

OR 

for(initiation; condition) {



increment or decrement;
}

******************************************************************

Day 17 (29/05/2023)	

for loop

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

debug

getter and setter 

switch

Scanner

Thread

Different ways to provide inputs

1. hard code input value
2. file reading (text file, prop file, excel, pdf)
3. Directly get the value from the application itself then use it as a input
4. Take input from DB.. RDBMS, DBMS
5. through scanner

****************************************************************************
Day 17 (29/05/2023)

array basics

for each loop

*********************************************************************

Day 18, 19, 20(06/07/2023)

array programming practice 18 and 19th

Arrays class
			
Multi-Dimentional array

Jagged array

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

String class demo

******************************************************************************
Day 21 (06/08/2023)
String practice and explanation


""
"  "
"a"
"4343"
"Sathya"
"fsjkf lkdsdk ld;l";

==

check given word is presentt in the sentence

String immutable
	
********************************************************************************			
				
Day 22 (06/09/2023)

String buffer 
String builder 

Wrapper classes


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Collection in Java

				
*************************************************

Day 23 (06/10/2023)

ArrayList
HashSet

*******************************************************

Day 24 (06/12/2023)

ArrayList method practice and discussion

Home work
	* Explain each methods in collection 
	* How do you print a HashSet in decending order
	* Get to know about Collections class 
	* How do you convert Integer into int and vice versa
	* What is upcasting and downcasting
	
*********************************************************************

Day 25 (06/13/2023)

ArrayList practice 
Map concept
Hash map

Homework

File readings

1. Text file
2. Prop file
3. Config file
4. Excel file (Apache POI api and Fillo api)
5. CSV file
6. SQL Execution

Similarly

You can create any files, delete any files, read or write file

*********************************************************************

Day 25 (06/14/2023)
	
Selenium Basics

Why we need automation
Benefits
Different Automation tools and Editor
Front end development tools and backend application tools

Difference between Web Browser and Web application
What and all we see in a browser
What and all we see in a web application (Textbox, checkbox, drop down, radio button, link, text..etc)
What are the actions we do in an application (click, write, drag and drop, scroll)

Who is WebDriver
How to open an application using webDriver
Session ID
WindowHandle
WebDriver focus


SELENIUM

* Its only for web application automation
* Selenium is written in many languages such as Java, Python, C#

Who is WebDriver 
What is WebElement

BASICs for understanding selenium 

* what are the actions we do on a browser

browser open
url enter
new tab open
tab close 
min 
max
entire browser close
scroll
zoom
navigate - back, forward, refresh

With in application what do we do

application launch - url type
text enter
button click
check box click
radio box click
drop down
links click
Text read/verify
Tab title
Mouse hover
double click
Right click
Date choose
Drag and drop
File upload
Verification/Assert 
page load speed/time(synchronization)
Keyboard
pop up
	alert
	tab
	web alert like info screen
	Desktop window
frames
wait
WebTable


Who is tester in Automation? ---- WebDriver(Tester)

Session ID also created when we run WebDriver each time.

Each window has an UNIQUE ID (String) --- Window Handle
	 its always associated with Set because WindowHandle never have dublicates

Whatever element you see on a web page is called WebElement

What is WebElement
	* DOM (right click on a page and inspect or F12 or Ctrl+Shift + I)
	
	* diff types of tags
		* html
		* body
		* header
		* input
		* div
		* ul
		* li
		* a 
		* svg
		* select (drop down)
		* frame or iframe (small html)
		* table
			* th 
			* tr
			* td
			
		* <table>
			<div>
				<tr>
					<th>
					<th>
					<th>
				<tr>
					<td>
					<td>
				<tr>
					<td>
					<td>

* attributes
	whatever key value pair we see inside any tag is called attributes
	
	<div> - start tag
	
	</div> - end tag
	
	<div key1 = "val1" key2 = "val2" > - start tag
	"text" 
	</div>
	
	where
	div - tagName
	key1, key2 - attributes
	val1, val2 - attribute's value
	"text" - tag's display name

How to find element in a page 

<html>

ancestor(div)
  parent(div)
	parent(ul)
		child(li)
			child(select)
		child(ul)
			child(li)
			child(li)
	parent(ul)
	parent(li)
ancestor(div)
	parent(div)
		child(div)
</html>

ancestor
parent
child
siblings
following ancestor, parent, child, siblings
preceding ancestor, parent, child, siblings
text
contains(text, 'Sathya')

We find elements in a page using locators 

Locators in selenium - 
	locator value should not be duplicate. must be unique
		means, id = "sathya" should be present only once

id 
	* do not use if it has numbers in it. 
name
className
	* with more spaces 
tagName
linkText
partialLinkText
CSS selector
xpath

id, name, className(class) - when these values are unique we can use them directly. When they are not unique, we use either xpath or CSS

findElement(By.id(""));
findElement(By.name(""));
findElement(By.class(""));
findElement(By.linkText("selenium"));
findElement(By.linkText("Testing Frameworks"));
findElement(By.linkText("Logging Frameworks"));
findElement(By.parialLinkText("Frameworks"));

* when id, name, className attributes are present in an element tag but they not unique, then we go to xpath 
* When id, name, className attributes are not present inside an element's tag, then also we use xpath

****************************************************************************
Day 25 (06/15/2023)

How to use selenium in Eclipse 
1. We have add selenium dependency in our project
 

Hirarchy 
* SearchContext Interface (findElement, findElements)
* WebDriver Interface ( Basic methods for a browser) 
* RemoteWebDriver Class( all basic methods are implemented here)
* Classes ChromeDriver, FirefoxDriver, etc.. 


interface SearchContext {

}

interface WebDriver extends SearchContext {

}

class RemoteWebDriver implements WebDriver {

}

class ChromeDriver extends RemoteWebDriver {

}

 

SearchContext 
 1) WebElement findElement(By by) 
 		WebDriver.findElement(By.id(""));
 		WebDriver.findElement(By.xpath("//strong[text() =  'ChromeDriver 108.0.5359.22']");
 
 2) List<WebElement> findElements(By by)
 		List<WebElement> allElements = WebDriver.findElements(By.id(""));
 		for(WebElement eachElement : allElelments) {
 		}

* By class 

* WebElement Interface

What is WebElement 
	* It is a interface which follows SearchContext (In Java)
	* Whatever element you see on a web page is called WebElement (For understanding)
	
click();
submit();
sendKeys();
clear();
getTagName();
getDomAttribute();
getAttribute();
isSelected();
isEnabled();
getText();
findElement();
findElements();
isDisplayed();
getLocation();
getSize();
getRect();
getCssValue();

WebDriver - interface

* WebDriver is nothing but us(TESTERs).
* The main properties of a browser are created as methods inside WebDriver interface


get()
  * In this method only we pass application URL
currentUrl()
	* It gives currently focused window's URL. So that we can validate against requirement that, URL is correct 
close()
 	* Closes the currently focused window
quit()
	* Closes all the window's opened during the session
getPageSource()
	*

@override
findElement()
findElements()

getTitle()
	* Gives the title of the window (tab tile) 
getWindowHandle()
	* It gives current window's handle
	* Its good practice to use getWindowHandle() method, before using getWindowHandles() method
	* This methods return type is String
	
getWindowHandles()
	* It gives all window's handles opened during that session
	* This methods return type is Set<String>
	
	*******************************************************************************

DAY 26 (06/16/2023)

TargetLocator switchTo()
	WebDriver frame(int index);
	WebDriver frame(String nameOrId);
	WebDriver frame(WebElement frameElement);
	WebDriver parentFrame();

	
	1) find the frame - means identify the element for the frame
		- we can identify the frame using 3 things.
			1. using index
			2. frameName
			3. by finding element for the frame
	2) switchTo().frame()
	3) do some action on any element inside the frame 
	4) switchTo().defaultContent();
	
	WebDriver window(String nameOrHandle);
		****WebDriver.switchTo().window();*******
		
		String parentWindowHandle = WebDriver.getWindowHandle();
		Set<String> allWindowHandles = WebDriver.getWindowHandles();
		for(String eachWindowHandle : allWindowHandles) {
			if(!eachWindowHandle.equals(parentWindowHandle)) {
				WebDriver.switchTo().window(eachWindowHandle);
				}
			}
		
	WebDriver newWindow(WindowType typeHint);
	WebDriver defaultContent();
	WebElement activeElement();



	Alert alert();
		dismiss();
		accept();
		getText();
		sendKeys();
		
switchTo().frame()
switchTo().window()
switchTo().alert()
switchTo().newWindow()
switchTo().alert().dismiss();
switchTo().alert().accept();
switchTo().alert().getText().toUpperCase();

WebDriver methods 

Navigation navigate();
	* back()
	* forward()
	* to(String url)
	* to(URL url)
	* refresh()
	
WebDriver.navigate().back();
WebDriver.navigate().to("www.faceBook.com");
	
Option manage()
	* Timeouts timeouts()
		* implicitWait()
		* explicitWait()
	* Window window()
		* setWindow()
		* maximize()
		* minimize()
	* getCookies()
	* deleteCookies()
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

RemoteWebDriver

System.setProperty("webdriver.chrome.driver", "C:\\Users\\LENOVO\\git\\SaraswathyJavaProject\\drivers\\chromedriver_107.exe");
ChromeDriver driver = new ChromeDriver();

But we do not need to create object like above. Because it will cause a problem when we need to open different browser in single driver instance

To avoid this we keep WebDriver interface as reference for object

WebDriver interface and ChromeDriver/FirefoxDriver/SafariDriver/EdgeDriver are connected through RemoteWebDriver class

All the methods in WebDriver interface are implemented in RemoteWebDriver.

All browser drivers are extended to RemoteWebDriver

WebDriver driver; 
driver = new ChromeDriver();
driver = new FirefoxDriver();


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Who is brower? 

Browsers
* Chrome
* Firefox
* MS edge
* Opera Mini
* UC browser
* HeadlessBrowser

How they used browser in Selenium 



Diff between Chrome browser and Chrome driver 

	We have to use specific driver for specific version of a browser
	
chrome - ChromeDriver - we need to download chromeDriver.exe, while running code, we have to let WebDriver about its path.
Instead of running chrome.exe from our system, we ask webDriver to run ChromeDriver.exe
For each browser, we need to take compatible version of its driver.
for eg: For chrome version 107, we need to download chrome driver version compatible for chrome 107
Basically we keep the chromeDriver.exe files inside project but we dont push them into git

In order to avoid compatibility issue, we have a concept called WebDriverManager

firefox - geckoDriver
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
XPath

XPATH - xml path

two types of xpath

absolute xpath - steps 
	* uses single slash - /html/body/header/div/nav/a[1]
	/html/body/div/div/div[2]/div/ul/li/div/div[2]/a
	/html/body/div/div/div[2]/div/ul/li[1]/div/div[2]/a
	
relative xpath - lift
	* uses double slash
	
crocs.in

* Basic syntax
		//tagName[@attribute = 'value']
		(//span[@class='menuLink-title-J7d'])[1]
		(//*[@class='menuLink-title-J7d'])[1]
		
		https://chromedriver.storage.googleapis.com/index.html?path=114.0.5735.90/
		//a[@href = '/index.html']
		driver.findElement(By.xpath("//a[@href = '/index.html']"));
		
		//a[@href = "/index.html"]
		driver.findElement(By.xpath("//a[@href = "/index.html"]"));
		driver.findElement(By.xpath("//a[@href = /"/index.html/"]"));

* text
//tagName[text() = 'value']

* and 
//span[text() = 'Women' and @class='menuLink-title-J7d']

* or 
//span[@std ='first' or @class='menuLink-title-J7d'] 


//span[contains(text(), 'Classic Crush White Unisex Clog')]

//a[@class = 'item-name-suo']/span[contains(text(), 'Classic Crush White Unisex Clog')]

//tagName[contains(@attribute, 'value')]

following
follwoing-child
following-parent
preceding
preceding-child
preceding-parent
ancestor


//tagName[@attribute = 'value']//following::tagName

When element is not found - we get elementNotFoundException

Why element is not found, because we wrongly identified the element
1) spelling mistake
2) flow mistake
3) xpath wrong
		
https://www.guru99.com/xpath-selenium.html#text
https://www.guru99.com/locators-in-selenium-ide.html

*******************************************************************************

DAY 27 (06/17/2023)

xpath practice



*******************************************************************************

DAY 28 (06/18/2023)


What is functional level testing and application level testing

We need to include application level testing in our functional level testing to make our testing better

For that, we use TestNG or Junit for validation

xpath practice

How to add selenium dependencies

How to download driver.exe file for chrome

Selenium Basic code

****Home work*****

*******************************************************************************

DAY 29 (06/19/2023)

Converting the methods into generic methods

SoftAssert and HardAssert

Thread.sleep(5000);

*********************************************************
DAY 30 (06/20/2023)

Property file reading

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Excel file reading 

Apache API
core, xml, ooml --dependencies
All the dependencies should be using same version

File Location --> File 
file name --> FileInputStream
file extension --> HSSF or XSSF

XSSF.workBook() or HSSF.workBook

which workbook
which sheet getSheet(index/name); 

which row - Row 
	column getCellValue();
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
Excel reading using query
 fillo api

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

* Window Handling

Session ID - its for driver
Window Handle - its for a window/tab

* each window has a unique id - window handle

getWindowHandle();
getWindowHandles();

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Alert

A popup in web page can be anything
	* Alert
	* Web page or web based window (we can inspect)
	* OS based window
	
	* When alert comes, we cant do anything on the original web page.
	* Also, we cant inspect the alert
	
	
* Alert needs to be handled
	* first we need to switch to the alert
	* use try catch to  check alert is present
* There are 3 types
	* Informational alert - OK button alone will present with some text
		alert.accept();
		alert.getText();
	* Yes or No alert
		alert.accept();
		alert.dismiss();
		alert.text();
	* Text Alert
		alert.sendKeys("");
		alert.accept();
		alert.dismiss();
		alert.text();

To handle alert 

NoAlertPresentException
UnHandledAlertException

*****************************************************

DAY 31 (6/21/2023)


* frames

	* webpage inside a webpage is called frames
	* iframe or frame tags are used
	* nested frames also available

* driver.switchTo().frame(frameIndex/frameName/frameElement);
* driver.switchTo().defaultContent(); -take you to either first frame or main content
* driver.switchTo().parentFrame(); - take you to parent frame

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

* drop down
	* element should present in select tag
	* We can select a drop down using 
		selectByIndex(0);
		selectByValue(string);
		selectByVisibleText(string);


discussed about how to write test cases for a page.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Revisiting actions class and its method

Actions class in selenium

* This class is used to automate mouse and keyboard actions 
* Mouse actions
	* left click
	* right click (context click)
	* double click
	* drag and drop
	* move mouse to hover on an element (mouse hover)
	* scroll
	* Keyboard actions 
	
* In actions, we combine many actions. 
* So whenever we use actions, we need to build(combine) and perform();

*********************************************************************************
DAY 32 (6/22/2023)

* Robot (Keyboard + mouse actions + document upload)

https://www.softwaretestinghelp.com/file-upload-in-selenium/
https://testguild.com/selenium-how-to-handle-windows-based-dialogs-and-pop-ups/

* It is used to automate Mouse and Keyboards 
* along with this, to automate window based pop ups, we use robot class 

(press, release)


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Waits in Selenium 

There are two types...
	1.ImplicitlyWait
		* written only once when opening the application.
		* This one line wait for page to load
		* This one line is also applicable for all the pages you open in that session.
	2. Explicit wait
	3. Fluent wait
	
https://www.selenium.dev/documentation/webdriver/waits/

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

* WebTable

* Table present in web pages are called Web Table
* First we need to find the table element. Mostly it is available with tag named as <table>
* tr - Row (including header)
* th - Header values
* td - data present in each column of the row except header

questions would be

	* get total row
	* get header value
	* get all row values
	* get a specific row's values
	* find given text is present in table
	* find the respective first column value of the given text

*****************************************************************************
DAY 33 (6/23/2023)

scrolling
	* Scroll bar is not a part of web application
	* So it cant be automated using selenium directly
	* We can scroll a web page using 
		* Actions (mouse, keyBoard)
		* Robot (mouse, keyBoard)
		* Java script Executor
			* By using JSE, we can do many actions (Whenever Selenium or Actions class or Robot class methods are not helpful)
				* click
				* scroll
				* send text
				* scroll until element is visible

scrolling 
	 JavascriptExecutor js = (JavascriptExecutor)driver;
	 js.executeScript(�window.scrollBy(0,150)�);
	 
	 https://www.guru99.com/execute-javascript-selenium-webdriver.html
	 
	 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	 
Screentshot

TakesScreenshot ts = (TakesScreenshot) driver;
ts..getScreenshotAs(OutputType.FILE);
File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
 * String screenshotBase64 = ((TakesScreenshot) element).getScreenshotAs(OutputType.BASE64);
	 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Framework in Selenium

Difference between Automation and Framework?
* Doing a work without manual effort is called - Automation
* Doing a same work by using a properly arranged structure of code.
	E.g: keep a separate class to read or write on excel, prop or config or text files
	
	* In Automation - duplicate codes, redundency of codes will be there

Page Object Model design pattern... 
	* each page - each java class
	* each class - find all the elements inside of it and store it in a variable with proper name. (Page Objects)
	* each class - find all the possible test cases and covert them into methods (Page Objects)
	* how do you differentiate pages in an application - if URL changes, its a new page

Test Driven
	* Data driven Framework
	* Keyword driven Framework
	* Hybrid framework
	
Tools - JUnit, TestNG

Behaviour Driven 
	* Cucumber along with JUnit/TestNG

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

TestNG
* Its a multipurpose tool and also works as a framework
* We can use TestNG as a tool when we use Test Driven or Behaviour Driven frameworks
* TestNG gives you some annotations and tags, so that you can run your test cases easily 
* To work with TestNG in Eclipse, you need to install TestNG Eclipse plugin via market place 
* In order to use TestNG annotations and tags in your project, you need to add TestNG dependencies 

Official Documentation page: https://testng.org/doc/documentation-main.html

Main annotation of TestNG is @Test 
	* If we run a class using TestNG, then whatever methods represented as @Test will run
	* There are two way to run a class file using TestNG
		1) Simply right click on the class and Run as TestNG 
		2) Right click on the class from project path, Covert the class into TestNG. It will create a xml file. 
			By using the file we can run the class (recommended way)
Whenever we run as TestNG, 
	1) we get a basic report under test-output --> index.html
	2) we also get the recently failed test case details --> emailable-report.html
	3) For recently failed test cases, we get xml in testng-failed.xml
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&7

TestNG Annotations

STATE CM - ST CM

Order of annotation

@BeforeSuite
@BeforeTest
@BeforeClass
@BeforeMethod
@Test
@AfterMethod
@AfterClass
@AfterTest
@AfterSuite

priority = 1
enabled = true/false
always run = true/false
invocation count = 3


*********************************************************************

DAY 34 (6/24/2023)

Parameters
DataProviders
DependsOnMethods
Groups
DependsOnGroups

***********************************************************************
DAY 34 (6/25/2023), DAY 35 (6/26/2023), DAY 36 (6/29/2023)

Framework updating

1) Integrate Extent report into our TestNG project by any means 
2) Write at least 3 test cases for 4 pages min
3) Try parallel running 

**************************************************************

DAY 37 (6/30/2023)

Behaviour driven framework using Cucumber and Junit/TestNG (BDD Framework)

* Need to install cucumber plug in for Eclipse
* Need to add dependencies in your project 
	* Cucumber-Java
	* Cucumber-jvm
	* Cucumber-junit
	* Cucumber-core
* Make sure that, all the above 4 dependencies need to have same version.
* Right click on your project--> Configure ---> Convert to cucumber project 
* We can run Cucumber with Junit as well as TestNG tool. Most preferable is Junit 

* When we go for it? When our team has manual testers
* When we create a framework, we have below files
	* Base class - where we initiate our driver, common methods 
	* Utilities class - where we have commonly used methods. Excel or prop file or DB reading
	* POM structure - separate class for each page (Page Object and Page factory)
	* Test case class 
	
* What are the 3 important files
	* Features folder (create inside test/resources folder.. eg. LoginPage.feature(file) ) - This is where we keep our test cases in simple english format(Gherkin language)
	* Step definition (Java file)
		* Java and selenium codes present in each pages class. 
		* Test cases present in feature files
		* Step definition files works as a link between coding and test cases
	* Runner (java file)
		* This is where our testing starts
		* feature file - path of specific file or features files folder
		* tag - test case tag name
		* Step def path - path of the specific step def or entire package name 
* Gherkin language
	* Given 
	* When 
	* Then
	* And
	* But

* Feature file
	* Feature 
	* Scenario (Test case)
	* How to pass parameters
	* Scenario Outline
	* Examples
	* Background

* Step definision
	* How to create it easily
	
* Runner file
	* This is where execution starts
	
Cucumber Structure

ProjectName
	src/main/java
	src/main/resources
	src/test/java
		Base package
			Base class - where we initiate web driver
		Utilities package
			Property reader class
			Excel reader class
			CSV file reader class
		Pages package (POM with Page objects and Page factory)
			Each pages class
		Step definition package
			Step definition files
		Runner package
			Runner files
	src/test/resources
		Features (folder)
			* Each feature files
			* property file
			* excel sheet 
			* Text files 
	drivers folder
		* Where we keep all the browser exe files
	target folder
		* This is where compile codes where present (.class file)
	test-output 
		* Reports
		* screenshots
	pom.xml
		* This is where we keep our dependencies for maven projects
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&7
Framework reports and basic knowledges on interview and work

***********************************************************

DAY 38 (7/01/2023), DAY 39 (7/01/2023)

Cucumber parameter
Extent report

***************************************************************